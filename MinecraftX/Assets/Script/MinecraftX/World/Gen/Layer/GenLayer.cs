using UnityEngine;
using System.Collections;

public abstract class GenLayer {

	/** seed from World#getWorldSeed that is used in the LCG prng */
	protected long worldGenSeed;

	/** parent GenLayer that was provided via the constructor */
	protected GenLayer parent;

	/**
     * final part of the LCG prng that uses the chunk X, Z coords along with the other two seeds to generate
     * pseudorandom numbers
     */
	private long chunkSeed;

	/** base seed to the LCG prng provided via the constructor */
	protected long baseSeed;

	public static GenLayer[] initializeAllBiomeGenerators(long baseSeed, WorldType worldType, string worldGeneratorOptions)
	{
		GenLayer genLayer = new GenLayerIsLand (1L);
		genLayer = new GenLayerFuzzyZoom (2000L, genLayer);
		GenLayerAddIsLand genLayerAddIsLand = new GenLayerAddIsLand (2001L, genLayer);
		GenLayerZoom genLayerZoom = new GenLayerZoom (2001L, genLayerAddIsLand);
		GenLayerAddIsLand genLayerAddIsLand1 = new GenLayerAddIsLand(2L, genLayerZoom); 
		genLayerAddIsLand1 = new GenLayerAddIsLand (50L, genLayerAddIsLand1);
		genLayerAddIsLand1 = new GenLayerAddIsLand (50L, genLayerAddIsLand1);
		GenLayerRemoveTooMuchOcean genLayerRoomTooMuchOcean = new GenLayerRemoveTooMuchOcean (2L, genLayerAddIsLand1);
		GenLayerAddSnow genLayerAddSnow = new GenLayerAddSnow (2L, genLayerRoomTooMuchOcean);
		GenLayerAddIsLand genlayerAddIsLand2 = new GenLayerAddIsLand (3L, genLayerAddSnow);
		GenLayerEdge genLayerEdge = new GenLayerEdge (2L, genlayerAddIsLand2, GenLayerEdge.Mode.COOL_WARM);
		genLayerEdge = new GenLayerEdge (2L, genLayerEdge, GenLayerEdge.Mode.HEAT_ICE);
		genLayerEdge = new GenLayerEdge (3L, genLayerEdge, GenLayerEdge.Mode.SPECIAL);
		GenLayerZoom genLayerZoom1 = new GenLayerZoom (2002L, genLayerEdge);
		genLayerZoom1 = new GenLayerZoom (2003L, genLayerEdge);
		GenLayerAddIsLand genLayerAddIsLand3 = new GenLayerAddIsLand (4L, genLayerZoom1);
		GenLayerAddMushroomIsLand genLayerAdddMushroomIsLand = new GenLayerAddMushroomIsLand (5L, genLayerAddIsLand3);
		GenLayerDeepOcean genLayerDeepOcean = new GenLayerDeepOcean (4L, genLayerAdddMushroomIsLand);
		GenLayer genLayer4 = GenLayerZoom.magnify (1000L, genLayerDeepOcean, 0);
		ChunkProviderSettings chunkprovidersettings = null;
		int i = 4;
		int j = i;

		GenLayer genLayer5 = GenLayerZoom.magnify (1000L, genLayer4, 0);
		GenLayerRiverInit genLayerRiverInit = new GenLayerRiverInit (100L, genLayer5);
		GenLayerBiome genLayerBiome = new GenLayerBiome (200L, genLayer4, worldType, worldGeneratorOptions);
		GenLayer genLayer6 = GenLayerZoom.magnify (1000L, genLayerBiome, 2);
		GenLayerBiomeEdge genLayerBiomeEdge = new GenLayerBiomeEdge (1000L, genLayer6);
		GenLayer genLayer7 = GenLayerZoom.magnify (1000L, genLayerRiverInit, 2);
		GenLayer genLayerHills = new GenLayerHills (1000L, genLayerBiomeEdge, genLayer7);
		GenLayer genLayer8 = GenLayerZoom.magnify (1000L, genLayerRiverInit, 2);
		genLayer8 = GenLayerZoom.magnify (1000L, genLayer8, j);
		GenLayerRiver genLayerRiver = new GenLayerRiver (1L, genLayer8);
		GenLayerSmooth genlayerSmooth = new GenLayerSmooth (1000L, genLayerRiver);
		genLayerHills = new GenLayerRareBiome (1001L, genLayerHills);

		for (int k = 0; k < i; ++k) {

			genLayerHills = new GenLayerZoom ((long)(1000 + k), genLayerHills);

			if (k == 0) {
				genLayerHills = new GenLayerAddIsLand (3L, genLayerHills);
			}

			if (k == 1 || i == 1) {
				genLayerHills = new GenLayerShore (1000L, genLayerHills);
			}
		}

		GenLayerSmooth genLayerSmooth1 = new GenLayerSmooth (1000L, genLayerHills);
		GenLayerRiverMix genLayerRiverMix = new GenLayerRiverMix (100L, genLayerSmooth1, genlayerSmooth);
		GenLayer genLayer3 = new GenLayerVoronoZoom (10L, genLayerRiverMix);
		genLayerRiverMix.initWorldGenSeed (baseSeed);
		genLayer3.initWorldGenSeed (baseSeed);
		return new GenLayer[] { genLayerRiverMix, genLayer3, genLayerRiverMix };

	}

	public GenLayer(long seed)
	{
		baseSeed = seed;
		baseSeed *= baseSeed * 6364136223846793005L + 6364136223846793005L;
		baseSeed += seed;
		baseSeed *= this.baseSeed * 6364136223846793005L + 1442695040888963407L;
		baseSeed += seed;
		baseSeed *= this.baseSeed * 6364136223846793005L + 1442695040888963407L;
		baseSeed += seed;
	}

	/**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
	public abstract int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight);

	protected static bool biomesEqualOrMesaPlateau(int biomeIDA, int biomeIDB)
	{
		
		if (biomeIDA == biomeIDB) {
			return true;
		} else if (biomeIDA != BiomeGenBase.mesaPlateau_F.biomeID && biomeIDA != BiomeGenBase.mesaPlateau.biomeID) {
			 BiomeGenBase biomegenbase = BiomeGenBase.getBiome (biomeIDA);
			 BiomeGenBase biomegenbase1 = BiomeGenBase.getBiome (biomeIDB);
		
			return (biomegenbase != null && biomegenbase1 != null) ? biomegenbase.isEqualTo (biomegenbase1) : false;
		} else {
			return biomeIDB == BiomeGenBase.mesaPlateau_F.biomeID || biomeIDB == BiomeGenBase.mesaPlateau.biomeID; 
		}
	}

	/**
     * Initialize layer's local worldGenSeed based on its own baseSeed and the world's global seed (passed in as an
     * argument).
     */
	public void initWorldGenSeed(long seed)
	{
		worldGenSeed = seed;

		if (this.parent != null)
		{
			this.parent.initWorldGenSeed(seed);
		}

		worldGenSeed *= worldGenSeed * 6364136223846793005L + 1442695040888963407L;
		worldGenSeed += baseSeed;
		worldGenSeed *= worldGenSeed * 6364136223846793005L + 1442695040888963407L;
		worldGenSeed += baseSeed;
		worldGenSeed *= worldGenSeed * 6364136223846793005L + 1442695040888963407L;
		worldGenSeed += baseSeed;
	}

	/**
     * Initialize layer's current chunkSeed based on the local worldGenSeed and the (x,z) chunk coordinates.
     */
	public void initChunkSeed(long p_75903_1_, long p_75903_3_)
	{
		chunkSeed = worldGenSeed;
		chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
		chunkSeed += p_75903_1_;
		chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
		chunkSeed += p_75903_3_;
		chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
		chunkSeed += p_75903_1_;
		chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
		chunkSeed += p_75903_3_;
	}

	/**
     * returns a LCG pseudo random number from [0, x). Args: int x
     */
	protected int nextInt(int p_75902_1_)
	{
		int i = (int)((chunkSeed >> 24) % (long)p_75902_1_);

		if (i < 0)
		{
			i += p_75902_1_;
		}

		chunkSeed *= chunkSeed * 6364136223846793005L + 1442695040888963407L;
		chunkSeed += worldGenSeed;
		return i;
	}

	/**
     * returns true if the biomeId is one of the various ocean biomes.
     */
	protected static bool isBiomeOceanic(int p_151618_0_)
	{
		return p_151618_0_  == BiomeGenBase.deepOcean.biomeID; // not added ocean and frozen ocean yet
	}

	/**
     * selects a random integer from a set of provided integers
     */
	protected int selectRandom(params int[] p_151619_1_)
	{
		return p_151619_1_[nextInt(p_151619_1_.Length)];
	}

	/**
     * returns the most frequently occurring number of the set, or a random number from those provided
     */
	protected int selectModeOrRandom(int p_151617_1_, int p_151617_2_, int p_151617_3_, int p_151617_4_)
	{
		return p_151617_2_ == p_151617_3_ && p_151617_3_ == p_151617_4_ ? p_151617_2_ : (p_151617_1_ == p_151617_2_ && p_151617_1_ == p_151617_3_ ? p_151617_1_ : (p_151617_1_ == p_151617_2_ && p_151617_1_ == p_151617_4_ ? p_151617_1_ : (p_151617_1_ == p_151617_3_ && p_151617_1_ == p_151617_4_ ? p_151617_1_ : (p_151617_1_ == p_151617_2_ && p_151617_3_ != p_151617_4_ ? p_151617_1_ : (p_151617_1_ == p_151617_3_ && p_151617_2_ != p_151617_4_ ? p_151617_1_ : (p_151617_1_ == p_151617_4_ && p_151617_2_ != p_151617_3_ ? p_151617_1_ : (p_151617_2_ == p_151617_3_ && p_151617_1_ != p_151617_4_ ? p_151617_2_ : (p_151617_2_ == p_151617_4_ && p_151617_1_ != p_151617_3_ ? p_151617_2_ : (p_151617_3_ == p_151617_4_ && p_151617_1_ != p_151617_2_ ? p_151617_3_ : this.selectRandom(new int[] {p_151617_1_, p_151617_2_, p_151617_3_, p_151617_4_}))))))))));
	}
}
